Breshenham Line Alogorithm
#include<windows.h>
#include<GL/glut.h>
#include<bits/stdc++.h>
using namespace std;
double x1,y3,x2,y2,X,Y;
void plot()
{

    double dx,dy,m,pk;
    int step;
    dx=x2-x1;
    dy=y2-y3;
    m=dy/dx;
    if (abs(dx)>abs(dy))
        step=abs(dx);
    else
        step=abs(dy);
    X=x1;
    Y=y3;
    if(m<1){
        pk=2*dy-dx;
        glColor3f(1.0,0.0,0.0);
        glBegin(GL_POINTS);
        glPointSize(1.0);
        glVertex2i(X,Y);
        cout << " pk:" <<pk << endl;
        for(int i=0;i<step;i++){
            if(pk<0){
                Y=Y;
                pk=pk+2*dy;
            }
            else{
                Y=Y+1;
                pk=pk+2*dy-2*dx;
            }
            X++;
            cout << i <<" " << X <<" "<< Y << endl;
            cout << " pk:" << pk <<endl;
            glBegin(GL_POINTS);
            glPointSize(1.0);
            glVertex2i(X,Y);
            glEnd();
        }
    }
    glFlush();
}
void init (void)
{

    glEnable(GL_POINT_SMOOTH);
    glClearColor(0.0,0.0,0.0,1.0);
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-100,100,-100,100);
}
int main(int argc,char**argv)
{
    cout<< "Enter (x1,y1):";
    cin>>x1>>y3;
    cout<< "Enter (x2,y2):";
    cin>>x2>>y2;
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowSize(500,500);
    glutInitWindowPosition(100,100);
    glutCreateWindow("Breshenham Line Alogorithm");
    init();
    glutDisplayFunc(plot);
    glutMainLoop();

}
